{
    "cells": [
        {
            "language": "typescript",
            "source": [
                "const dangero = {\n  a: 10,\n  b: 20\n};\nconsole.log(dangero);\nconst dangero2 = {\n  ...dangero,\n  a: 30\n};\n\nconsole.log(dangero);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{ a: 10, b: 20 }",
                                "{ a: 10, b: 20 }",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Assign multiple Objects as one Object"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const objj1 = {a: 10};\nconst objj2 = {b: 20};\nconst objj3 = {c: 30};\n\n// ES2018\nconst combined = {...objj1, ...objj2, ...objj3};\nconsole.log(combined)\n\n// ES2015 \nconsole.log(Object.assign({}, objj1, objj2, objj3));"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{ a: 10, b: 20, c: 30 }",
                                "{ a: 10, b: 20, c: 30 }",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "Note, however, that spread properties do not always produce the same result as Object.assign(). Consider the following code:"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "Object.defineProperty(Object.prototype, 'a', {\n  set(value) {\n    console.log('set called!');\n  }\n});\n\nconst obj = {a: 10};\n\nconsole.log({...obj});    \n// → {a: 10}\n\nconsole.log(Object.assign({}, obj));    \n// → set called!\n// → {}"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{ a: 10 }",
                                "{ a: 10 }",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "Declare a Type Alias!"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "type Person= {\n  name: string;\n  age: Number;\n};\n\nlet unaPersona: Person = {\n  name: \"max\",\n  age: 18,\n};\n\nlet gente: Person[] = [unaPersona];\n"
            ],
            "outputs": []
        }
    ]
}